#Content almost the same as in Scenario06
#Run it and then re-run Scenario07
#
# Plots for rho = 0.25, smart = 0.05,...,0.95
#
#Circle
#map = "GEN13"
#version = "16"


#Manhattan uniform
map = "GEN16"
version = "16"

#
# Probability x 2
map = "GEN16"
#
version = "17"

start = 1
stop = 19

#inputPrefix = "/Users/m/Downloads/Naxos/"

inputPrefix = "/tmp/"
outputPrefix = "/tmp/A"
maxSN = 0
findMax = T
scale = 1

#
#---------> CHANGE HERE: Scenario 06
#
#
# All
co2Idx = 13
tripCnt = 15
genPrefix = "A"


overall=!TRUE

rhoStart=1
rhoStop=19

stacked <- matrix(nrow=2, ncol=stop-start+1)
label <- matrix(nrow=1, ncol=stop-start+1)
sum <- matrix(ncol=1, nrow=stop-start+1)

findMax = TRUE

noStart=1
noStop=1		

#fixedRho = 5
#rhoStart=rhoStop=fixedRho


cN=array(dim=c(stop-start+1,rhoStop-rhoStart+1))
cS=array(dim=c(stop-start+1,rhoStop-rhoStart+1))
cM=array(dim=c(stop-start+1,rhoStop-rhoStart+1))

rN=array(dim=c(stop-start+1,rhoStop-rhoStart+1))
rS=array(dim=c(stop-start+1,rhoStop-rhoStart+1))


fillCOnly = FALSE

plotDist = TRUE


require(fitdistrplus)
maxSN = 0
if (findMax) {
		
for (j in rhoStart:rhoStop) {

	filesReadRho = 0
	for (i in start:stop) {
		rho = formatC(j*5, width=3, format="d", flag="0")
		smart = formatC(i*5, width=3, format="d", flag="0")
		S = c()
		N = c()
		tripsS = c()
		tripsN = c()
		
		mS = NA
		mN = NA
		rSij = NA
		rNij = NA

		filesRead = 0
		for (no in noStart:noStop) {
			f = paste(inputPrefix, "Naxos-Sim-",map,"-rho_", rho, "-smart_",smart,"-ver_",version,"-no_",no,".txt", sep="")
			message(f)
			mS = NA
			mN = NA
			rSij = NA
			rNij = NA
			
			tdcrNmS_CO2R = NA
			if (file.exists(f)) {
				source(f)
				if (length(tdcrNmS_CO2R) > 1) {
					filesRead = filesRead + 1
					filesReadRho = filesReadRho + 1
					
					for (k in 1:length(tdcrNmS_CO2R[1,])) {
						v = (tdcrNmS_CO2R[co2Idx,k] * tdcrNmS_CO2R[tripCnt,k] *
							tdcrNmS_CO2R[co2Idx+1,k] * tdcrNmS_CO2R[tripCnt+1,k]);
							
						if (is.na(v) || v == 0) {
							tdcrNmS_CO2R[,k] = NA
						}
					}
					
					S = sort(c(S, sort(tdcrNmS_CO2R[co2Idx + 1,]/tdcrNmS_CO2R[tripCnt + 1,])/1000))
					N = sort(c(N, sort(tdcrNmS_CO2R[co2Idx,]/tdcrNmS_CO2R[tripCnt,])/1000))
					
					tripsS = sort(c(tripsS, sort(tdcrNmS_CO2R[tripCnt + 1,])))
					tripsN = sort(c(tripsN, sort(tdcrNmS_CO2R[tripCnt + 0,])))
					rSij = median(tripsS)
					rNij = median(tripsN)
					M = S+N
					mS = median(S)
					mN = median(N)
					maxSN = max(maxSN, max(M, max(N, S)))
					
					if (filesRead > 0) {
						Sdist = fitdist(S,"norm", method="mme") 
						Smean = Sdist$estimate[1]
						Ndist = fitdist(N,"norm", method="mme")
						Nmean = Ndist$estimate[1]
						mS = Smean
						mN = Nmean
					}
				}
			}

			if (!file.exists(f) || length(tdcrNmS_CO2R) <= 1) {
				message("NOT EXISTS!")
				mS = NA
				mN = NA
				rSij = NA
				rNij = NA
			}
		}	
				
			#if (j == rhoStart) {
				stacked[1,i] = mS
				stacked[2,i] = mN
				label[i] = i*5 / 100 
				sum[i] = mS + mN
			#}
			
			cN[i,j] = mN
			cS[i,j] = mS
			cM[i,j] = mN + mS
			rN[i,j] = rNij
			rS[i,j] = rSij
	
			#message("maxSM = ", maxSN)
				
		if (plotDist && filesRead > 0) {
		
				Sdist = fitdist(S,"norm", method="mme") 
				Smean = Sdist$estimate[1]
				Ssd = Sdist$estimate[2]
				Ndist = fitdist(N,"norm", method="mme")
				Nmean = Ndist$estimate[1]
				Nsd = Ndist$estimate[2]
				
				pdf(file = paste(outputPrefix, "Naxos-Sim-M-",map,"-rho_", rho, "-ver_",version, "-smart_",smart,"-N.pdf", sep=""))
				plot(Ndist);
				dev.off()
				
				
				pdf(file = paste(outputPrefix, "Naxos-Sim-M-",map,"-rho_", rho, "-ver_",version, "-smart_",smart,"-S.pdf", sep=""))
				plot(Sdist);
				dev.off()
				
				message(paste("N_mean:",Nmean, "S_mean:",Smean, "N_sd:", Nsd, "S_sd:", Ssd))
		}
		}
		
		if (!fillCOnly) {
		
			if (overall) {
				pdf(file = paste("/tmp/",genPrefix,"_Naxos-Sim-Overall-",map,"-ver_",version,"-rho_",rho,".pdf",sep=""), paper="special", width=11, height=7)#, pointsize=30)
				#colnames(sum) <- label
				
				rho1 =  j * 5 / 100
				main = bquote(list(rho==.(rho1)))
				
				barplot(main=main,sum, xlab="Smart vehicles fraction",
				beside=TRUE,
				xpd=FALSE,
				ylab= expression(paste(CO[2], plain(" emission per trip [g]")))
				)
				title(main = list(main, font = 1))
				
				dev.off()
			} else if (filesReadRho > 0) {
				pdf(file = paste("/tmp/",genPrefix,"_Naxos-Sim-",map,"-ver_",version,"-rho_",rho,".pdf",sep=""), paper="special", width=11, height=7)#, pointsize=30)
				colnames(stacked) <- label
				
				rho1 =  j * 5 / 100
				main = bquote(list(rho==.(rho1)))
				
				barplot(main=main,stacked, xlab="Smart vehicles fraction",
				beside=TRUE,
				xpd=FALSE,
				ylab= expression(paste(CO[2], plain(" emission per trip [g]"))),
				#comment out line below to disable legend
				legend = c("Smart vehicles emission","Normal vehicles emission")
				)
				title(main = list(main, font = 1))
				
				dev.off()
			}
			
		}
	}
}







